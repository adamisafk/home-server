services:

  ######################
  ####  NETWORKING  ####
  ######################

  nginx:
    image: jc21/nginx-proxy-manager:latest
    container_name: nginx
    restart: unless-stopped
    ports:
      - 80:80
      - 81:81
      - 443:443
    volumes:
      - ./services/nginx/data:/data
      - ./services/letsencrypt:/etc/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
  
  duckdns:
    image: lscr.io/linuxserver/duckdns:latest
    container_name: duckdns
    restart: unless-stopped
    volumes:
      - ./services/duckdns/config:/config
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - SUBDOMAINS=${DDNS_SUBDOMAINS}
      - TOKEN=${DDNS_TOKEN}
      - LOG_FILE=true

  qvpn:
    image: binhex/arch-qbittorrentvpn:latest
    container_name: qvpn
    restart: unless-stopped
    privileged: true
    ports:
      - 6881:6881
      - 6881:6881/udp
      - 8086:8086 # Web UI
      - 8118:8118 # Privoxy
        ### SERVICES ###
      - 8082:80 # Openbooks
      - 8083:7878 # Radarr
      - 8084:8989 # Sonarr
      - 8085:9117 # Jackett
    volumes:
      - ./services/qbittorrent:/config
      - ${WIREGUARD_DIR}:/config/wireguard
      - ${MEDIA_DIRECTORY}/torrents:/torrents
      - /etc/localtime:/etc/localtime:ro
    devices:
       - /dev/net/tun:/dev/net/tun
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - VPN_ENABLED=yes
      - VPN_PROV=custom
      - VPN_CLIENT=wireguard
      - VPN_INPUT_PORTS=80,7878,8989,9117,8086
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=no
      - LAN_NETWORK=${LAN_NETWORK}
      - WEBUI_PORT=8086




  ####################
  ####  SECURITY  ####
  ####################

  authentik:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik
    restart: unless-stopped
    command: server
    ports:
      - 9000:9000
      - 9443:9443
    volumes:
      - ./services/authentik/media:/media
      - ./services/authentik/custom-templates:/templates
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}

  authentik-worker:
    image: ghcr.io/goauthentik/server:latest
    container_name: authentik-worker
    restart: unless-stopped
    command: worker
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/authentik/media:/media
      - ./services/authentik/certs:/certs
      - ./services/authentik/custom-templates:/templates
    environment:
      PUID: ${UID}
      PGID: ${GID}
      TZ: ${TZ}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}




  ########################
  ####  SYSTEM TOOLS  ####
  ########################

  yacht:
    image: selfhostedpro/yacht
    container_name: yacht
    restart: unless-stopped
    ports:
      - 8000:8000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./services/yacht:/config
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - DISABLE_AUTH=true

  ouroboros:
    image: pyouroboros/ouroboros:latest
    container_name: ouroboros
    restart: unless-stopped
    hostname: ouroboros
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - CLEANUP=true
      - INTERVAL=300
      - LOG_LEVEL=info
      - SELF_UPDATE=true
      - IGNORE=mongo influxdb postgres mariadb




  ########################
  ####  APPLICATIONS  ####
  ########################

  homer:
    image: b4bz/homer:latest
    container_name: homer
    restart: unless-stopped
    ports:
      - 8080:8080
    volumes:
      - ./services/homer/assets:/www/assets
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - INIT_ASSETS=0
  
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    restart: unless-stopped
    group_add:
      - "106"
    ports:
      - 8096:8096
    volumes:
      - ./services/jellyfin/config:/config
      - ${MEDIA_DIRECTORY}/media/tv:/data/tv
      - ${MEDIA_DIRECTORY}/media/movies:/data/movies
      - ${MEDIA_DIRECTORY}/media/books:/data/books
    devices:
      - /dev/dri:/dev/dri
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}

  bitwarden:
    image: vaultwarden/server:latest
    container_name: bitwarden
    restart: unless-stopped
    ports:
      - 8090:8090
    volumes:
      - ./services/bitwarden:/data
    environment:
      - WEBSOCKET_ENABLED="true"
      - ROCKET_PORT=8090

  openbooks:
    image: evanbuss/openbooks:latest
    container_name: openbooks
    restart: unless-stopped
    network_mode: service:qvpn
    volumes:
      - ${MEDIA_DIRECTORY}/media:/books
    command: --persist --name ${SERVER_USER}
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}

  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    network_mode: service:qvpn
    volumes:
      - ./services/radarr/config:/config
      - ${MEDIA_DIRECTORY}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    restart: unless-stopped
    network_mode: service:qvpn
    volumes:
      - ./services/sonarr/config:/config
      - ${MEDIA_DIRECTORY}:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}

  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    restart: unless-stopped
    network_mode: service:qvpn
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=1
    volumes:
      - ./services/jackett:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}





  #####################
  ####  DATABASES  ####
  #####################

  postgresql:
    image: docker.io/library/postgres:12-alpine
    container_name: postgresql
    restart: unless-stopped
    user: root:root
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - ./services/postgresql:/var/lib/postgresql/data
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}
      - POSTGRES_PASSWORD=${PG_PASS}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
      
  redis:
    image: docker.io/library/redis:alpine
    container_name: redis
    restart: unless-stopped
    command: --save 60 1 --loglevel warning
    user: 1000:1000
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - ./services/redis:/data
    environment:
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TZ}



  # firefox:
  #   image: lscr.io/linuxserver/firefox:latest
  #   container_name: firefox
  #   network_mode: service:qvpn
  #   security_opt:
  #     - seccomp:unconfined #optional
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=${TZ}
  #   volumes:
  #     - ./temp:/config
  #   shm_size: "1gb"
  #   restart: unless-stopped